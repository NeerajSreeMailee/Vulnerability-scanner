import time
import requests
import logging
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import json

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class VulnerabilityScanner:
    def __init__(self, url):
        self.url = url
        self.vulnerabilities = []
        self.scan_start_time = time.time()

    def scan_sql_injection(self):
        payload = "' OR 1=1 --"
        response = requests.get(self.url, params={'q': payload})
        logging.debug(f"SQL Injection - Response text: {response.text}")
        if "SQL" in response.text:  # Detect SQL Injection
            self.vulnerabilities.append({
                "type": "SQL Injection",
                "description": "SQL Injection vulnerability detected. This occurs when user input is not sanitized and is passed to a SQL query.",
                "severity": "High",
                "payload": payload,
                "request_params": {'q': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Sanitize user inputs and use parameterized queries."
            })

    def scan_xss(self):
        payload = "<script>alert('XSS')</script>"
        response = requests.get(self.url, params={'q': payload})
        logging.debug(f"XSS - Response text: {response.text}")
        if payload in response.text:  # Detect XSS
            self.vulnerabilities.append({
                "type": "Cross-Site Scripting (XSS)",
                "description": "XSS vulnerability detected. Malicious scripts injected into web pages can be executed in the user's browser.",
                "severity": "Medium",
                "payload": payload,
                "request_params": {'q': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Validate and sanitize input from users to prevent malicious code execution."
            })

    def scan_open_redirect(self):
        payload = "http://malicious.com"
        response = requests.get(self.url, params={'redirect': payload})
        logging.debug(f"Open Redirect - Response URL: {response.url}")
        if response.url != self.url:  # Detect Open Redirect
            self.vulnerabilities.append({
                "type": "Open Redirect",
                "description": "Open Redirect vulnerability detected. Attackers can redirect users to malicious sites.",
                "severity": "Medium",
                "payload": payload,
                "request_params": {'redirect': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Validate redirect URLs to ensure they do not lead to untrusted domains."
            })

    def generate_pdf_report(self, filename="scan_report.pdf"):
        """
        Generate a PDF report with metadata and vulnerabilities.
        """
        self.scan_end_time = time.time()
        self.scan_duration = self.scan_end_time - self.scan_start_time
        
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 40, f"Scan Report for URL: {self.url}")
        c.drawString(50, height - 60, f"Scan Start Time: {time.ctime(self.scan_start_time)}")
        c.drawString(50, height - 80, f"Scan End Time: {time.ctime(self.scan_end_time)}")
        c.drawString(50, height - 100, f"Scan Duration: {self.scan_duration:.2f} seconds")
        c.drawString(50, height - 120, f"Total Vulnerabilities Detected: {len(self.vulnerabilities)}")
        
        y_position = height - 140
        if self.vulnerabilities:
            for vulnerability in self.vulnerabilities:
                c.drawString(50, y_position, f"Type: {vulnerability['type']}")
                y_position -= 20
                c.drawString(50, y_position, f"Description: {vulnerability['description']}")
                y_position -= 20
                c.drawString(50, y_position, f"Severity: {vulnerability['severity']}")
                y_position -= 20
                c.drawString(50, y_position, f"Payload: {vulnerability['payload']}")
                y_position -= 20
                c.drawString(50, y_position, f"Request Params: {vulnerability['request_params']}")
                y_position -= 20
                c.drawString(50, y_position, f"Response Code: {vulnerability['response_code']}")
                y_position -= 20
                c.drawString(50, y_position, f"Response Text: {vulnerability['response_text']}")
                y_position -= 40
        else:
            c.drawString(50, y_position, "No vulnerabilities found.")
        
        c.save()
        print(f"PDF Report saved as {filename}")

    def generate_json_report(self, filename="scan_report.json"):
        """
        Generate a JSON report with metadata and vulnerabilities.
        """
        report_data = {
            "url": self.url,
            "scan_start_time": time.ctime(self.scan_start_time),
            "scan_end_time": time.ctime(time.time()),
            "scan_duration": round(time.time() - self.scan_start_time, 2),
            "total_vulnerabilities": len(self.vulnerabilities),
            "vulnerabilities": self.vulnerabilities
        }

        try:
            with open(filename, 'w') as json_file:
                json.dump(report_data, json_file, indent=4)
            print(f"JSON Report saved as {filename}")
        except Exception as e:
            print(f"Error saving JSON report: {e}")