import time
import requests
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

class VulnerabilityScanner:
    def __init__(self, url):
        self.url = url
        self.vulnerabilities = []
        self.scan_start_time = time.time()

    def scan_sql_injection(self):
        payload = "' OR 1=1 --"
        response = requests.get(self.url, params={'q': payload})
        if "SQL" in response.text:  # Detect SQL Injection
            self.vulnerabilities.append({
                "type": "SQL Injection",
                "description": "SQL Injection vulnerability detected. This occurs when user input is not sanitized and is passed to a SQL query.",
                "severity": "High",
                "payload": payload,
                "request_params": {'q': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Sanitize user inputs and use parameterized queries."
            })

    def scan_xss(self):
        payload = "<script>alert('XSS')</script>"
        response = requests.get(self.url, params={'q': payload})
        if payload in response.text:  # Detect XSS
            self.vulnerabilities.append({
                "type": "Cross-Site Scripting (XSS)",
                "description": "XSS vulnerability detected. Malicious scripts injected into web pages can be executed in the user's browser.",
                "severity": "Medium",
                "payload": payload,
                "request_params": {'q': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Validate and sanitize input from users to prevent malicious code execution."
            })

    def scan_open_redirect(self):
        payload = "http://malicious.com"
        response = requests.get(self.url, params={'redirect': payload})
        if response.url != self.url:  # Detect Open Redirect
            self.vulnerabilities.append({
                "type": "Open Redirect",
                "description": "Open Redirect vulnerability detected. Attackers can redirect users to malicious sites.",
                "severity": "Medium",
                "payload": payload,
                "request_params": {'redirect': payload},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Validate redirect URLs to ensure they do not lead to untrusted domains."
            })

    def scan_directory_traversal(self):
        payload = "/../../../../etc/passwd"
        response = requests.get(self.url + payload)
        if "root:" in response.text:  # Detect Directory Traversal
            self.vulnerabilities.append({
                "type": "Directory Traversal",
                "description": "Directory Traversal vulnerability detected. Attackers can access sensitive files outside the web root.",
                "severity": "High",
                "payload": payload,
                "request_params": {},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Sanitize user inputs and ensure proper file path validation."
            })

    def scan_server_info_disclosure(self):
        response = requests.get(self.url)
        if "Server" in response.headers:  # Detect Server Information Disclosure
            self.vulnerabilities.append({
                "type": "Server Information Disclosure",
                "description": "Server Information Disclosure vulnerability detected. The web server is exposing sensitive information like version details.",
                "severity": "Medium",
                "payload": "N/A",
                "request_params": {},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Configure the web server to hide version numbers and sensitive details in response headers."
            })

    def scan_http_headers(self):
        response = requests.get(self.url)
        insecure_headers = []
        if "X-Frame-Options" not in response.headers:
            insecure_headers.append("X-Frame-Options")
        if "X-XSS-Protection" not in response.headers:
            insecure_headers.append("X-XSS-Protection")
        
        if insecure_headers:
            self.vulnerabilities.append({
                "type": "HTTP Response Header Issues",
                "description": "Missing or insecure HTTP response headers. These headers are important for preventing attacks like Clickjacking and XSS.",
                "severity": "Medium",
                "payload": "N/A",
                "request_params": {},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": f"Add missing headers: {', '.join(insecure_headers)}"
            })

    def scan_ssl_tls_issues(self):
        # This is just a mock; a real scan would use a library like `ssl` or `requests` for SSL/TLS checks.
        response = requests.get(self.url, verify=False)  # Disable SSL verification for demonstration
        if response.status_code != 200:  # Simulating SSL issues if not 200
            self.vulnerabilities.append({
                "type": "Weak SSL/TLS Configuration",
                "description": "Weak SSL/TLS Configuration. The server may be using outdated SSL/TLS protocols or cipher suites.",
                "severity": "High",
                "payload": "N/A",
                "request_params": {},
                "response_code": response.status_code,
                "response_text": response.text,
                "remediation": "Configure the server to use strong SSL/TLS protocols and ciphers."
            })

    def perform_all_scans(self):
        """
        Perform all scans: SQL Injection, XSS, Open Redirect, Directory Traversal, Server Info Disclosure, HTTP Header Issues, SSL/TLS Issues
        """
        self.scan_sql_injection()
        self.scan_xss()
        self.scan_open_redirect()
        self.scan_directory_traversal()
        self.scan_server_info_disclosure()
        self.scan_http_headers()
        self.scan_ssl_tls_issues()

    def generate_pdf_report(self, filename="scan_report.pdf"):
        """
        Generate a PDF report with metadata and vulnerabilities.
        """
        self.scan_end_time = time.time()
        self.scan_duration = self.scan_end_time - self.scan_start_time
        
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 40, f"Scan Report for URL: {self.url}")
        c.drawString(50, height - 60, f"Scan Start Time: {time.ctime(self.scan_start_time)}")
        c.drawString(50, height - 80, f"Scan End Time: {time.ctime(self.scan_end_time)}")
        c.drawString(50, height - 100, f"Scan Duration: {self.scan_duration:.2f} seconds")
        c.drawString(50, height - 120, f"Total Vulnerabilities Detected: {len(self.vulnerabilities)}")
        
        y_position = height - 140
        if self.vulnerabilities:
            for vulnerability in self.vulnerabilities:
                c.drawString(50, y_position, f"Type: {vulnerability['type']}")
                y_position -= 20
                c.drawString(50, y_position, f"Description: {vulnerability['description']}")
                y_position -= 20
                c.drawString(50, y_position, f"Severity: {vulnerability['severity']}")
                y_position -= 20
                c.drawString(50, y_position, f"Payload: {vulnerability['payload']}")
                y_position -= 20
                c.drawString(50, y_position, f"Request Params: {vulnerability['request_params']}")
                y_position -= 20
                c.drawString(50, y_position, f"Response Code: {vulnerability['response_code']}")
                y_position -= 20
                c.drawString(50, y_position, f"Response Text: {vulnerability['response_text']}")
                y_position -= 40
        else:
            c.drawString(50, y_position, "No vulnerabilities found.")
        
        c.save()
        print(f"PDF Report saved as {filename}")

# Example usage:
url_to_scan = "https://google.com/"  # Update the URL based on the website to scan
scanner = VulnerabilityScanner(url_to_scan)

# Perform all scans
scanner.perform_all_scans()

# Generate the report
scanner.generate_pdf_report("scan_report.pdf")